// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Idioma(): string {
    let value = this.get("Idioma");
    return value!.toString();
  }

  set Idioma(value: string) {
    this.set("Idioma", Value.fromString(value));
  }

  get Gender(): string {
    let value = this.get("Gender");
    return value!.toString();
  }

  set Gender(value: string) {
    this.set("Gender", Value.fromString(value));
  }

  get Developer(): string {
    let value = this.get("Developer");
    return value!.toString();
  }

  set Developer(value: string) {
    this.set("Developer", Value.fromString(value));
  }
}
